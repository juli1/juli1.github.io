<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Julien Delange</title>
    <description>Harder, Better, Faster, Stronger</description>
    <link>http://julien.gunnm.org/</link>
    <atom:link href="http://julien.gunnm.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 31 Dec 2020 00:40:19 +0000</pubDate>
    <lastBuildDate>Thu, 31 Dec 2020 00:40:19 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Why Code Inspector?</title>
        <description>&lt;p&gt;&lt;em&gt;Note: this post is part of series about the foundations for Code Inspector, you
can find the previous article &lt;a href=&quot;/software engineering/essay/humans/human behavior/2020/12/25/the-machine-is-better-than-you/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is the last post in the series about Code Inspector. The &lt;a href=&quot;/software engineering/essay/humans/human behavior/2020/12/17/we-are-all-stupid/&quot;&gt;first post&lt;/a&gt;
focused on why humans are fallible by design and sub-optimal at executing
small and repetitive tasks. The &lt;a href=&quot;/software engineering/essay/humans/human behavior/2020/12/25/the-machine-is-better-than-you/&quot;&gt;second post&lt;/a&gt; focused on the
exponential progress of automation: tasks performed by machines
are getting more complex every day and soon, most of our jobs are
going to be automated.&lt;/p&gt;

&lt;p&gt;In the next paragraphs, I explain the main drivers for starting Code Inspector.&lt;/p&gt;

&lt;h1 id=&quot;the-software-maintenance-problem&quot;&gt;The software maintenance problem&lt;/h1&gt;

&lt;p&gt;There is a real struggle to develop software, especially because it is really
hard to find and understand the design and implementation choices make by the initial
authors. Software is often poorly documented, which makes it very complicated
to troubleshoot an issue or maintain an old codebase.&lt;/p&gt;

&lt;p&gt;The average tenure for software developers is between 2 to 3 years. But
the software is operated and maintained for decades. As developers leave a
company their knowledge of a project leaves the company. &lt;strong&gt;In some industries,
the developers that maintains a software were not even born when the initial
system was designed.&lt;/strong&gt;. (Think twice about this!)&lt;/p&gt;

&lt;p&gt;Some developers have no idea how the system they operate actually works.
It can take days or weeks to troubleshoot an issue because the system is way
too complex and the documentation, non-existent. And it is not common that issues
go unnoticed for months because developers do not understand the impact
of their scope.&lt;/p&gt;

&lt;p&gt;There is an obvious need for a product that helps developers in understanding
a code base and establish a plan to improve it. This product needs to be
user-friendly, non-intimidating and gives clear actionable paths to improve
their codebase.&lt;/p&gt;

&lt;h1 id=&quot;the-software-modernization-problem&quot;&gt;The software modernization problem&lt;/h1&gt;

&lt;p&gt;Software is like our physical infrastructure: it’s aging and
improving legacy software is a major undertaking. Reports estimates
that bad code and technical debt takes up to 30% of developer time
(see &lt;a href=&quot;https://stripe.com/files/reports/the-developer-coefficient.pdf&quot;&gt;stripe study&lt;/a&gt;,
&lt;a href=&quot;https://redfin.engineering/pay-down-your-technical-debt-faster-by-limiting-your-payments-84fdca5e4ea3&quot;&gt;other sources&lt;/a&gt; estimate it’s more like 20%).
The same &lt;a href=&quot;https://stripe.com/files/reports/the-developer-coefficient.pdf&quot;&gt;study from Stripe&lt;/a&gt;
reports that bad code costs companies $85B annually. Even if you cut the estimate
in half, it’s still an number that makes you wonder if we should continue to write
code as we do today (and is a good argument to &lt;a href=&quot;/software engineering/essay/humans/human behavior/2020/12/17/we-are-all-stupid/&quot;&gt;support the first post&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;There are two solutions to address the modernization problem:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Hire more engineers, which increases costs exponentially and increases productivity linearly (at best).&lt;/li&gt;
  &lt;li&gt;Automate software development.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Until very recently, only the first solution was possible. The recent
progress on software analysis and machine learning allows to automate
software development. This is a natural evolution: after all, today, Google translate
writes better English than I do and a Tesla drives better than I do
(on a highway for now). Why a computer couldn’t program better than I do?&lt;/p&gt;

&lt;p&gt;At first, only few aspects will be automated. As the technology
develops, the scope of automation will grow and the human factor
in software development will shrink.&lt;/p&gt;

&lt;h1 id=&quot;the-training-problem&quot;&gt;The training problem&lt;/h1&gt;

&lt;p&gt;The change from manual to automated software development is not going to happen
overnight. Demand for software engineers will still be strong for the next ten
to twenty years and the two problems mentioned before (maintenance + modernization)
will require mode engineers over time.&lt;/p&gt;

&lt;p&gt;The department of labor &lt;a href=&quot;https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm&quot;&gt;already predicts&lt;/a&gt;
that demand for software engineer will grow by 20% in the next ten years.
The traditional education system cannot absorb so many engineers. The job
market for software engineers will be heavy on the demand (a lot of job
openings) and limited on the offer (not enough engineers).&lt;/p&gt;

&lt;p&gt;This means that many engineers will be under-trained and there will
be a need for additional training. A code automation platform
can help engineers to become better by providing guidance.
Such a platform will not only guide them in their work but also help them at
becoming better software engineers by explaining why some modification are recommended.&lt;/p&gt;

&lt;h1 id=&quot;the-mission&quot;&gt;The mission&lt;/h1&gt;

&lt;p&gt;The mission of Code Inspector is clear: &lt;strong&gt;help developers to produce better software&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are three main aspects to achieve this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Identification&lt;/strong&gt;: detect issues in a codebase, surface
them in a user-friendly interface and help developers to prioritize software maintenance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: automate resolution of bugs and
maintenance issues. Let the machine fix issues for you: it will do it better than
the majority of humans.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Training&lt;/strong&gt;: incentivize developers to maintain a codebase, fix issues
and guide them through code changes (e.g. explain why they are done).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The financial impact is clear as well: with an average salary of
&lt;a href=&quot;https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm&quot;&gt;$108,000 per year&lt;/a&gt;,
a product that makes engineers 1% more productive would already unlock a value
of $1,000 per engineer per year. And if such a product could even cut the time spent
in technical debt by 50%, it will then save $10,000 per developer per year.&lt;/p&gt;

&lt;p&gt;This is a huge, underestimated problem and this
is why I left everything to focus on this project. The coming year is going
to be very exciting and I can’t wait for it to start.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Dec 2020 05:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/software%20engineering/essay/humans/human%20behavior/2020/12/26/why-code-inspector/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/software%20engineering/essay/humans/human%20behavior/2020/12/26/why-code-inspector/</guid>
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        <category>code inspector</category>
        
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        <category>humans</category>
        
        <category>human behavior</category>
        
      </item>
    
      <item>
        <title>The machine is better than you</title>
        <description>&lt;p&gt;&lt;em&gt;Note: this post is part of series about the foundations for Code Inspector, you
can find the previous article &lt;a href=&quot;/software engineering/essay/humans/human behavior/2020/12/17/we-are-all-stupid/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Since the industrial revolution (that started about 200 years ago),
we are delegating more complex tasks to machines.
At first, we delegated simple tasks on an assembly line. These machines
were better than humans in all aspects: they do not go on strike, they
do not stop to go to the bathrooms but most importantly: their results
and performance are &lt;strong&gt;consistent&lt;/strong&gt; and &lt;strong&gt;predictable&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/XCxcmEQWxDdc8qsd2R/giphy-downsized.gif&quot; alt=&quot;Les Temps Modernes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The result of the machine does not depend on the discussion it had with
its partner the night before nor how much wine it had at the bar while chatting
with its friends. The machine delivers results according to objective,
non-ambiguous specifications.&lt;/p&gt;

&lt;p&gt;Until recently, machines were dedicated to automate (mostly) blue collar jobs
(factory, farming, etc). But in the last twenty/thirty years, machines took
white-collar jobs too (in finance, security, sales, marketing).
Today, the computer fixes your grammar mistakes and optimizes your finance better than many humans would do.
They do it cheaper, faster, accelerating innovation across the world.&lt;/p&gt;

&lt;p&gt;Machines start to take over very complex tasks. And they are better than us at it.
The best example of how machines improved over the last ten years is
the autopilot technology from Tesla.
On highway, a Tesla drives better than you would drive. The car
stays perfectly within its lanes, better than you would do.
It still fails from time to time (especially in construction zones) and adapting
the car to such situations is just a question of time: 90% of the functionality is here and
achieving full self-driving is just a question of time.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/H7rpSYHRyYgamxQNqw/giphy-downsized.gif&quot; alt=&quot;Tesla Self Driving&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The most important aspect is that machines do the tasks they are dedicated to
better than humans. They do it &lt;strong&gt;consistently&lt;/strong&gt;, &lt;strong&gt;predictably&lt;/strong&gt; and only
fail within their Mean Time Between Failure (MTBF) which is measurable
and again, predictable.&lt;/p&gt;

&lt;p&gt;Are we doomed to be replaced by machines? That is still not clear.
Machines are great at performing a task they are programmed for (such
as tighten a screw or drive a car). They will get better every day. And they
will learn to complete more complex tasks year after year.&lt;/p&gt;

&lt;p&gt;But machines still need to be told what to do.
We can program them to do perfectly one single task and they will do it better than us
on all dimensions.
But they are not the entity where ideas originates at first. That part is still
dedicated to humans. For now.&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Dec 2020 05:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/software%20engineering/essay/humans/human%20behavior/2020/12/26/the-machine-is-better-than-you/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/software%20engineering/essay/humans/human%20behavior/2020/12/26/the-machine-is-better-than-you/</guid>
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        <category>code inspector</category>
        
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        <category>humans</category>
        
        <category>human behavior</category>
        
      </item>
    
      <item>
        <title>We are all stupid</title>
        <description>&lt;p&gt;&lt;em&gt;Note: this post is part of series about the foundations for Code Inspector&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We, as humans, believe we are smart and intelligent. Granted, we can be
amazing creatures capable of the best and the worst. We can strap ourselves
to a giant ass rocket and &lt;a href=&quot;https://en.wikipedia.org/wiki/Moon_landing&quot;&gt;go to the moon&lt;/a&gt;.
The same human machine can inadvertently kill itself &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_selfie-related_injuries_and_deaths&quot;&gt;while
taking a selfie&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are inconsistent in our level of achievement.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/KbZYGHClLQCB407kQW/giphy-downsized.gif&quot; alt=&quot;On the moon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When it comes to programming, engineers believe they know better than
anyone else (even more than the machine) how to produce efficient code. Years ago,
developers were writing assembly code, claiming
that the C compiler was producing less efficient code. Unfortunately, even
if they achieved to be faster sometimes, it lead to having code that is
harder to maintain and is quickly being outdated (in terms
of performance and maintenance) by compiler optimizations. That led to some
questions from programmers wondering how C or C++ code can be faster than
their own assembly code (&lt;a href=&quot;https://stackoverflow.com/questions/40354978/why-does-c-code-for-testing-the-collatz-conjecture-run-faster-than-hand-writte&quot;&gt;example&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Some may believe humans may outperform machines on small and repetitive tasks
but the reality is different.&lt;/p&gt;

&lt;p&gt;We have proof every day about how we fail at doing repetitive tasks
that we know well. We know the road around our home but we will have
77% of accidents less than 15 miles around our home (&lt;a href=&quot;https://www.sawayalaw.com/blog/auto-accident-statistics-infographic/&quot;&gt;source&lt;/a&gt;).
Each year, more than 30,000 persons die on the road each year because of human
failure (&lt;a href=&quot;https://en.wikipedia.org/wiki/Motor_vehicle_fatality_rate_in_U.S._by_year&quot;&gt;source&lt;/a&gt;).
Even when we have rigorous training like in the aviation industry, the
vast majority of failure comes from humans factors: 88% of plane
crashes are attributed to pilot errors (&lt;a href=&quot;https://www.baumhedlundlaw.com/aviation-accident/why-planes-crash/human-factors-in-aviation/&quot;&gt;source&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Humans are fallible by design.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We started to automate the boring tasks. Machines are producing goods
with an amazing quality. Planes are flying themselves with little to no
guidance. Cars are now equipped with autopilot which keeps your vehicle in the
lane better than any human could do. The major blocker to speed up the acceleration
of these technologies is our acceptance. Keep in mind that no so long ago,
lift were operated by specialized workers (&lt;a href=&quot;https://en.wikipedia.org/wiki/Elevator_operator&quot;&gt;source&lt;/a&gt;)
and they were also making mistakes (&lt;a href=&quot;https://www.npr.org/2015/07/31/427990392/remembering-when-driverless-elevators-drew-skepticism&quot;&gt;an interesting podcast about it&lt;/a&gt;). Who has any concern about safety when
entering an elevator these days?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Machines are better than humans at small, boring and repetitive tasks.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The human machine is fallible by design. And this is what makes it so
wonderful. We do stupid things, either by omission
(we forget to do something) or commission (we do something we did not
intend to do). This is why you sometimes love or hate people.
As humans, we need to focus on complex problems and delegate
to machines repetitive and automatable tasks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Next article: &lt;a href=&quot;/software engineering/essay/humans/human behavior/2020/12/25/the-machine-is-better-than-you/&quot;&gt;The machine is better than you&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2020 23:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/software%20engineering/essay/humans/human%20behavior/2020/12/17/we-are-all-stupid/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/software%20engineering/essay/humans/human%20behavior/2020/12/17/we-are-all-stupid/</guid>
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        <category>code inspector</category>
        
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        <category>humans</category>
        
        <category>human behavior</category>
        
      </item>
    
      <item>
        <title>On immutability</title>
        <description>&lt;p&gt;&lt;em&gt;Note: this page is part of the &lt;a href=&quot;/software engineering/essay/2020/03/06/software-engineering-series&quot;&gt;“Essays on Software Engineering”&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I discovered Scala and functional programming when I joined Twitter. Scala
introduced me to this new world
of pure functions and immutability. I loved it so much that I started teaching
the language for all new employees (if you ever attended my class, I
apologize for all the bad puns and jokes I made).&lt;/p&gt;

&lt;p&gt;Over the years, I really embraced functional programming as a discipline.
No matter what language I used, I try to always stick to some keys principles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;pure functions&lt;/strong&gt;: the output of a function depends only on its inputs.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;immutability&lt;/strong&gt;: keep all data immutable, any modification results in a copy&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You do not need to use a functional
programming language to use these principles, you can apply them
to almost any language. I use them while coding in Java and Python.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/John_Carmack&quot;&gt;John Carmack&lt;/a&gt;
also tried to apply these principles when building
the &lt;a href=&quot;https://en.wikipedia.org/wiki/Id_Tech_4&quot;&gt;Doom 3 3D engine (idTech 4)&lt;/a&gt;, built
using C++.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/1PhArSujR_A?start=124&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;I will skips the reason to use functional programming and focus on immutability.&lt;/p&gt;

&lt;h1 id=&quot;idempotence-and-determinism&quot;&gt;Idempotence and determinism&lt;/h1&gt;

&lt;p&gt;You want your function to be easy to understand and test. Ideally, you want
the result of a function to be idem-potent: no matter how many times you
invoke the function, you get the same result if you provide the same inputs.&lt;/p&gt;

&lt;p&gt;That rule is being verified if you use immutable data, let’s illustrate this
principle with an example.&lt;/p&gt;

&lt;p&gt;Let’s consider a class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Person&lt;/code&gt; in an hybrid language:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;case class Person(name: String, age: Int)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, let’s define two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;older&lt;/code&gt; functions. One that mutates the value
passed as parameters (let’s assume parameters are mutable).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Person older(person: Person, age: Int) {
  person.age = person.age + age;
  return person;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And another &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;older&lt;/code&gt; function where we use immutable data (and we copy the argument).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Person older(person: Person, age: Int) {
  return person.copy(age = person.age + age);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, consider the following block of code&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Person p = Person(&quot;foo&quot;, 42);

Person p2 = older(p, 10);
Person p3 = older(p, 10);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ideally, what you really want is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p2 == p3&lt;/code&gt; since they both have the same
inputs. Unfortunately, this will not work with the first function
since we mutate the value ahead of time. If you use the first
function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p3.age == 62&lt;/code&gt; and if you use the first function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p3.age == 52&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The problem is that such mutation will spread in your codebase like the
plague and will make really difficult to follow the codepath. Let 10
developers follow such practices and you will end up with spaghetti code
that becomes a nightmare to understand.&lt;/p&gt;

&lt;p&gt;Immutability comes hand in hand with pure functions. If you want to embrace
immutability, embrace pure functions.&lt;/p&gt;

&lt;h1 id=&quot;parallelism&quot;&gt;Parallelism&lt;/h1&gt;

&lt;p&gt;One of the hardest problem on computer science is to write correct
parallel programs. With computers having multiple cores all programs are
multi-threaded and data is being shared between cores/thread, which
requires to use locking mechanism (e.g. mutex, semaphore, etc.).&lt;/p&gt;

&lt;p&gt;The reason we use mutex is precisely because a data is being mutated and
we want to guarantee only one thread modifies a data at a time. If you
use immutable data structure, these problems are non-existent for you
since you &lt;em&gt;never&lt;/em&gt; modify data structure (you always copy and create
new data).&lt;/p&gt;

&lt;p&gt;In other words, using immutable data let’s you write scalable programs
from the start.&lt;/p&gt;

&lt;h1 id=&quot;the-cost-of-immutability&quot;&gt;The cost of immutability&lt;/h1&gt;

&lt;p&gt;The recurrent against immutable data is the additional runtime cost. The argument is that
using immutable data structures has a heavy runtime cost since you need to
allocate more memory to support instantiation of multiple objects. Using immutable
data then requires faster machines with more memory to run a program.&lt;/p&gt;

&lt;p&gt;This argument is a pure fallacy for two reasons.&lt;/p&gt;

&lt;p&gt;The first reason is technical. There are a lot of technical tricks to implement
immutable data without having a huge runtime cost. For example, in Scala,
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy()&lt;/code&gt; function generated for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;case class&lt;/code&gt; makes
a &lt;a href=&quot;https://docs.scala-lang.org/tour/case-classes.html&quot;&gt;shallow copy&lt;/a&gt; of a given object,
reducing drastically the runtime footprint of your program (compared to deep copy).&lt;/p&gt;

&lt;p&gt;The second reason is pure economics.
The &lt;a href=&quot;https://www.bls.gov/ooh/computer-and-information-technology/computer-and-information-research-scientists.htm&quot;&gt;average salary of a computer scientist is $122,840&lt;/a&gt;.
Tech companies such as Stripe or Google have the best engineers and still
spend 10% to 20% of their time dealing
with bad code (source: &lt;a href=&quot;https://stripe.com/reports/developer-coefficient-2018&quot;&gt;Stripe study&lt;/a&gt;).
To put it more clearly: the cost of bad code is more than $10,000 to $20,000 per developer
per year.&lt;/p&gt;

&lt;p&gt;The reality is: &lt;strong&gt;the cost of labor to write and maintain the software
is far higher than the cost of hardware&lt;/strong&gt;. Therefore, we should use all
potential methods (in terms of management, programming style or execution
platform) to reduce the labor costs. The use of immutability or functional
programming is only one candidate among others.&lt;/p&gt;

&lt;p&gt;Of course, engineers will &lt;em&gt;always&lt;/em&gt; believe they can outsmart the system
and produce a more efficient program by using some shady tricks (e.g. produce
better assembly cost than the C compiler). The reality
is that 99% of the time, they are dead wrong (e.g. compilers do a better job). And in the remaining 1%, the code should be carefully evaluated if this is worth the cost:
if the manual optimization is used, it will need to be maintained during the lifecyle
of the software (e.g. who wants to maintain assembly code if not an absolute necessity?).&lt;/p&gt;
</description>
        <pubDate>Fri, 11 Dec 2020 23:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/software%20engineering/essay/immutability/scala/2020/12/11/on-immutability/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/software%20engineering/essay/immutability/scala/2020/12/11/on-immutability/</guid>
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        <category>scala</category>
        
        <category>immutability</category>
        
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        <category>immutability</category>
        
        <category>scala</category>
        
      </item>
    
      <item>
        <title>On team organization</title>
        <description>&lt;p&gt;&lt;em&gt;Note: this page is part of the &lt;a href=&quot;/software engineering/essay/2020/03/06/software-engineering-series&quot;&gt;“Essays on Software Engineering”&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Over the years, I noticed many teams are organized around three main roles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Software Engineer (SWE)&lt;/strong&gt;: design, architect systems and write code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Engineering Manager (EM)&lt;/strong&gt;: coordinate the life of the team, ensure work is being done, cares about promotion&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Product Manager (PM)&lt;/strong&gt;: interface between the customers and the engineering team, define the specification&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some additional roles that comes into play, such as SWET (Software Engineer in Testing)
or SRE (System Reliability Engineering).&lt;/p&gt;

&lt;p&gt;Most of teams I have seen have at least one EM, few SWE and (sometimes)
one PM. But the other roles (SWET and SRE) are definitely not always
present and sometimes, part of a totally separate organization.&lt;/p&gt;

&lt;p&gt;In addition, there is always no specific role to review the documentation,
either internally or externally. And this part of the software development
becomes outdated very quickly.&lt;/p&gt;

&lt;p&gt;But lack of tests is what makes software unstable or introduce regressions.
Lack of documentation is what makes it hard to maintain. These aspects
are very often overlooked on the short term but have consequences on the
long term.&lt;/p&gt;

&lt;p&gt;There should be two ways to solve this problem:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reduce the number of SWE and add more SWET&lt;/strong&gt;. Let the software
engineer focus on writing code and let the SWET focus on writing code.
This solution has the benefit of introducing independent testing: the
test is not written by the author of the implementation. Similarly,
with such an approach, an editor should also maintain the documentation
of the system. Having an independent qualified editor would make sure the documentation
is correctly written and does not skip any detail.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make testing and documentation an evaluation criteria for SWE&lt;/strong&gt;. Often,
testing and documentation are overlooked by SWE because they do not
consider them &lt;em&gt;valuable&lt;/em&gt;. EM should introduce incentives to write good
documentation and penalize engineers not writing enough tests or
documentation.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 06 Dec 2020 23:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/software%20engineering/essay/2020/12/06/on-team-organization/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/software%20engineering/essay/2020/12/06/on-team-organization/</guid>
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        
        <category>software engineering</category>
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>Build software like you build a house</title>
        <description>&lt;p&gt;&lt;em&gt;Note: this page is part of the &lt;a href=&quot;/software engineering/essay/2020/03/06/software-engineering-series&quot;&gt;“Essays on Software Engineering”&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/architectural-failure04.jpg&quot; alt=&quot;Requirements mismatches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you realize your interfaces do not match, too late in the development process.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On 15 March 1986, the Hotel New York rapidly disintegrated in less than a minute at about 11:25 am&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The investigation led to the discovery that the original structural engineer had made a serious error in calculating the building’s structural load. The structural engineer had calculated the building’s live load (the weight of the building’s potential inhabitants, furniture, fixtures, and fittings) but the building’s dead load (the weight of the building itself) was completely omitted from the calculation. This meant that the building as constructed could not support its own weight. Collapsing was only a matter of time. After three different supporting columns failed in the days before the disaster, the other columns—which took on the added weight no longer supported by the failed columns—could not support the building&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Collapse_of_Hotel_New_World#Casualties&quot;&gt;wikipedia source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Does that story sounds crazy to you? It should. Architectural failures
are rare, which is a good think. Yet, this is how we build software today
and failures are still very common in the software industry.&lt;/p&gt;

&lt;h1 id=&quot;the-building-metaphor&quot;&gt;The building metaphor&lt;/h1&gt;

&lt;p&gt;Building a new house follows a clear process that is more or less like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Establish the requirements (number of bathroom, bedrooms, placement, type of heat, etc.)&lt;/li&gt;
  &lt;li&gt;Inspect them, validate them with the different stakeholders (customers, suppliers, etc)&lt;/li&gt;
  &lt;li&gt;Work on an execution plan with milestones&lt;/li&gt;
  &lt;li&gt;Inspect the work by independent inspector.&lt;/li&gt;
  &lt;li&gt;Enjoy your new place.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example, if you build a house, you are going to start the foundations,
build the structure of the house, install the plumbing and electricity
and finally finish with the dry-wall/paint.
Everybody will understand you cannot start to install the bathtub if
the plumbing is not installed. You need to follow a specific order, otherwise,
you face major delays and cost impact (e.g. if you install the bathroom before
the plumbing is validated and checked, you might have to demolish the bathroom
to fix it later).&lt;/p&gt;

&lt;p&gt;Designing software follows the same rules and processes.&lt;/p&gt;

&lt;p&gt;For example, when you design a system with a database, you need
to understand the type of data, the frequency and type of access
before adding indexes or think of potential sharding schemes. These would be
your requirements. It will impact how you access or cache the data
but can also impact how you will deploy your system.&lt;/p&gt;

&lt;p&gt;However, very often, engineers overlook the most basic requirements and build systems
that are either not satisfying them (with system under-performing)
or go full berserk mode and over-satisfy them (with a higher implementation cost).
Both are not efficient. A great example here is the launch of the healthcare.gov:
the system was designed to handle 50,000 simultaneous connections when
250,000 people visited the website on
launch day (&lt;a href=&quot;https://en.wikipedia.org/wiki/HealthCare.gov#Issues_during_launch&quot;&gt;wikipedia&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The typical argument for a lack of attention on quality is that
software can be changed easily once delivered. This argument
is a fallacy, especially once the system is deployed in production. Changing
a system reliably while fully deployed in production is way
harder than changing it at design-phase.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/change-production.webp&quot; alt=&quot;Requirements mismatches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An engineer upgrading a system in production&lt;/p&gt;

&lt;h1 id=&quot;the-case-of-safety-critical-systems&quot;&gt;The case of safety-critical systems&lt;/h1&gt;

&lt;p&gt;Surprisingly, safety-critical systems (such as the one used in plane or rockets)
do not fail as much as regular ones.&lt;/p&gt;

&lt;p&gt;The main reasons is because as construction, these types of systems
are regulated and need to follow a rigorous production process that
catches such mistakes. Avionics and aerospace software follow
more or less the same constraints than software running nuclear power plants.
And surprisingly, these processes follow the same steps than
the one used to build a new house (start with the requirements,
validate them, have independent inspection, etc.). They also have clear
inspection and requirements to satisfy by law (note that interestingly, cars
are not as regulated).&lt;/p&gt;

&lt;p&gt;The takeaway: when you carefully follow a (good) process, you avoid
mistakes. As Bezos says: &lt;em&gt;Good intentions don’t work. Processes do&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;should-we-learn-better&quot;&gt;Should we learn better?&lt;/h1&gt;

&lt;p&gt;The main problem is the lack of knowledge. Projects do not fail intentionally,
they fail because engineers do not know better. There is a gap in knowledge, where
most engineers see software development only through the lens
of programming/coding and never heard what a software architecture is.&lt;/p&gt;

&lt;p&gt;We need to teach and explain what software architecture is
and how systems should be designed and built. These concepts have been missed,
especially in a world where we promise to become a software engineer
in just a few weeks of learning. In a world where most of the future
software engineers will not be able to get a degree before they enter
the workforce[1], it is becoming urgent to teach these values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/architectural-failure02.jpg&quot; alt=&quot;Architecture School&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The solution for better software: be architects&lt;/p&gt;

&lt;p&gt;[1]&lt;a href=&quot;https://speakerdeck.com/heathermiller/the-times-they-are-a-changin&quot;&gt;The Times They Are a Changin’ - Heather Miller talk&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Jun 2020 23:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/software%20engineering/essay/2020/06/21/build-software-like-you-build-a-house/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/software%20engineering/essay/2020/06/21/build-software-like-you-build-a-house/</guid>
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        
        <category>software engineering</category>
        
        <category>essay</category>
        
      </item>
    
      <item>
        <title>Do not take yourself too seriously</title>
        <description>&lt;p&gt;&lt;em&gt;Note: this page is part of the &lt;a href=&quot;/software engineering/essay/2020/03/06/software-engineering-series&quot;&gt;“Essays on Software Engineering”&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I often encounter and work with people who believe they are inventing the wheel
and are so unique that you need to to listen to them and do exactly what they say
(in French, you would say &lt;em&gt;“ils pensent avoir inventé le fil à couper le beurre”&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Such people take themselves too seriously. They believe that without them, the world
would not go round. They will try to block you for the sake of being right when
in fact, all what they are is annoying. Do not be such a person. They are full of
themselves. And very boring. Life is not made to be boring. You are better than
this.&lt;/p&gt;

&lt;p&gt;The academic world is full of such people, frustrated that they did
not find what their fellow neighbor invented and believe a solution cannot be good unless
they invent it. Many researchers are so frustrated
that they just reject others work, copy it, or tweak it slightly to finally claim
a new invention. There is even a name for it: &lt;a href=&quot;https://en.wikipedia.org/wiki/Not_invented_here&quot;&gt;Not Invented Here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Of course, the very same behavior is present in the corporate world.
Remember that coworker who criticizes other projects because it was led
by their peers? Or the grumpy developer who re-implemented a piece of code
just because he does not like some obscure (and often, very subjective) aspect?
Would the reaction be the same if it was done by them?&lt;/p&gt;

&lt;p&gt;Remember how different teams duplicate work inside the same companies
instead of having shared code they can reuse? Or programmers not removing their
old deprecated code (aka &lt;em&gt;dead code&lt;/em&gt;) &lt;em&gt;“just in case”&lt;/em&gt; it might be useful?&lt;/p&gt;

&lt;p&gt;Duplicate efforts can be useful sometimes. For example, when creating
the iPhone, Jobs had two teams: one implementing the phone using software, the
other using hardware. In this exact case, the objective was to compare
two ways of doing one thing (we all know the result: the software variation won).
But the vast majority of times, duplicating work
is an ego issue, with people thinking they are better than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;insert-name-or-thing-here&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Do not be driven by your ego. This does not help you to move forward and
is mentally draining. This also does not help people around you.&lt;/p&gt;

&lt;p&gt;Instead, be driven by objective goals and metrics. If there is an objective
to improve quality of a particular piece of code, do not write a new project:
contribute to the existing one and improve its code coverage (remember
that &lt;a href=&quot;https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/&quot;&gt;re-writing projects from scratch rarely works&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I believe there are two powerful principles to follow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Be mindful of others.&lt;/li&gt;
  &lt;li&gt;Do not take yourself too seriously.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first principle is basic and yet, often overlooked. Try to put yourself in other people’s shoes
and understand how they feel. That will help you empathize with the difficulties
they might be having. This often explains why or how they react
to a particular person or event. This principle is also illustrated
by the habit &lt;em&gt;“Seek to understand, then to be understood”&lt;/em&gt; in &lt;a href=&quot;https://en.wikipedia.org/wiki/The_7_Habits_of_Highly_Effective_People&quot;&gt;The 7 habits of Highly Effective People&lt;/a&gt;, an amazing book I would recommend.&lt;/p&gt;

&lt;p&gt;The second principle is useful to put things in perspectives. You are a human
being who is failable by definition. You probably believe you are smart
and better than others because your mom, wife or dog told you.
In fact, as suggested by the &lt;a href=&quot;https://en.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effect&quot;&gt;Dunning Kruger effect&lt;/a&gt;,
you are probably the worst person to know your own personal value.
This fact is illustrated every day in the stock market: many &lt;del&gt;gamblers&lt;/del&gt;
investors believe they can beat the market when in reality, all they
really achieve are losses. Similarly, many engineers believe they know how to
optimize code themselves manually when in reality, the compiler does it better
with optimization heuristics that have been implemented by researchers
and language specialists. You might like to think you are better than others
but you are probably not. Entertaining the idea of being that smart is
counter-productive and is not going to help you.&lt;/p&gt;

&lt;p&gt;You will make mistakes and this is going to be okay.
Your challenge is not to not make mistakes: you will do bad things sometimes, regardless how hard you try not to.
Your challenge is to put mechanisms and processes that will help you to avoid mistakes so that you catch them before you commit them.
In software, this is done by using defensive programming, increasing test coverage (unit/integration tests), and having good observability/monitoring.&lt;/p&gt;

&lt;p&gt;We do not succeed because we are better than others.
We succeed because we understand how to be successful with them.&lt;/p&gt;

&lt;p&gt;So get back to work, be nice and do not take yourself too seriously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Thanks to Najwa for editing. 🙏&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 23:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/misc/2020/04/03/do-not-take-yourself-too-seriously/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/misc/2020/04/03/do-not-take-yourself-too-seriously/</guid>
        
        <category>misc</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Freedom</title>
        <description>&lt;p&gt;Within weeks, fundamental liberties have been sacrified in the name of safety.&lt;/p&gt;

&lt;p&gt;When we were previously infuriated by censorship and totalitarian governments,
we are now thankful to have &lt;del&gt;controlled&lt;/del&gt; curated information, either by
government or artificial intelligence. We are not even surprised when
our devices are used to track any progress of the disease when we were previously
worried about the use of device to track our moves. Nevermind if this is good or bad,
anything is good to sacrify in the name of safety. We
surrendered the right to be different or just disagree.
For ourselves or others.&lt;/p&gt;

&lt;p&gt;We accept to be forced to stay home. We accept to be controlled
and be told where to go, for how long. We accept to abdicate our
fundamental liberties.&lt;/p&gt;

&lt;p&gt;We fail to build a society where citizens are empowered to take decisions and
they rather accept to accept instructions at face value without any critical
thinking.&lt;/p&gt;

&lt;p&gt;Sad.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2020 13:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/misc/2020/04/03/freedom/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/misc/2020/04/03/freedom/</guid>
        
        <category>misc</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Outside</title>
        <description>&lt;p&gt;Today was a lucky day. I ran outside.&lt;/p&gt;

&lt;p&gt;The sun was shining, the streets were empty. Shops were closed.
The only few people I saw were other runners or homeless persons.&lt;/p&gt;

&lt;p&gt;Not sure how long it is going to last. We are ordered to stay
confined until experts evaluate we are safe to resume our lives.&lt;/p&gt;

&lt;p&gt;Nobody knows how deadly is this outbreak. Or how long this is going to last.&lt;/p&gt;

&lt;p&gt;Modern society prepared us for this. The latest information
is carefully crafted, curated and displayed in near real-time on all devices,
making each of us experts able to understand and evaluate
carefully the situation.&lt;/p&gt;

&lt;p&gt;Not sure for how long I will still have the permission to run outside.
Maybe soon I will have to stay inside, indefinitely.
That is for the good of the community, we cannot afford to take any risk.&lt;/p&gt;

&lt;p&gt;I trust our leaders to put an end to this situation.
No doubt that will be given the permission to go outside soon.
And that we will be able to enjoy time together again.&lt;/p&gt;
</description>
        <pubDate>Mon, 30 Mar 2020 13:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/misc/2020/03/30/outside/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/misc/2020/03/30/outside/</guid>
        
        <category>misc</category>
        
        
        <category>misc</category>
        
      </item>
    
      <item>
        <title>Manage projects like you run a race</title>
        <description>&lt;p&gt;&lt;em&gt;Note: this page is part of the &lt;a href=&quot;/software engineering/essay/2020/03/06/software-engineering-series&quot;&gt;“Essays on Software Engineering”&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I used to run long distance trail races. My last race was in 2016, a 100 km
race in &lt;a href=&quot;https://www.dcnr.pa.gov/StateParks/FindAPark/WorldsEndStatePark/Pages/default.aspx&quot;&gt;Worlds End State Park&lt;/a&gt;, in the middle of Pennsylvania.
That particular day, I did not plan to finish the race: my body was already
exhausted from years of running without much rest, I only wanted to finish
the first 50k. Surprisingly, that day, my body felt good and at the 40 km mark,
a race volunteer convinced me to keep going as I was way ahead in terms of time.
Hours later, I finished the race about 15 minutes before the cut-off, limping,
around midnight, after running about several miles without a lamp.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/worldsends.jpg&quot; alt=&quot;Worlds Ends Race Picture&quot; /&gt;
The night before the race&lt;/p&gt;

&lt;p&gt;What went wrong that day? I did not plan to run 100k but 50k and
did not pack any battery or a lamp replacement. My mind was set on
running 50k from the start and not ready to go any longer. I did not plan
for the unexpected.&lt;/p&gt;

&lt;p&gt;It wasn’t like this before. When a race was less than 26 miles, I took it as a training run.
But when it was more than this, I meticulously planned it. I was
researching the elevation profile, checking support stations and
what food and liquids were provided. I prepare bags to drop at support stations located along the course and pack them with
more than twice of what I need: dry socks, food or a new t-shirt.
For each race, I clearly knew where and when I should be.&lt;/p&gt;

&lt;p&gt;When you think about it, a race is very simple: run X miles under Y hours.
There are constraints, such as the elevation profile, the weather or the type
of terrain. All of this can be planned and managed to reach the goal.
To succeed, all you need is to make sure you are trained, know what to
expect at regular interval of the race and have whatever you need through
the race.&lt;/p&gt;

&lt;p&gt;Over the years, I realized this process is no different than project management.
This is exactly the same.&lt;/p&gt;

&lt;p&gt;When you start a project, you also have a goal (deliver X within Y months),
some constraints and resources. As for a race, if the goal is not realistic,
you do not sign up and come back if or when you evaluate this being feasible.
Once you sign up, you establish a roadmap that tells you what and when
things should be completed. You have milestones that show you the incremental
progress you are going to do over time. It gives a clear overview of the
project work plan, not only to you but to the team that can also discuss
potential dependencies and organize for them to be delivered on time.&lt;/p&gt;

&lt;p&gt;Does it sound like basic project management to you? Yet, I still see many important projects
being started without even having milestones set. Engineers do not know
what they should be doing when they come to work. Even worse: sometimes, engineers
or managers do not even know what race they are running
(if they are running any). They are sometimes just lost in the company wilderness.&lt;/p&gt;

&lt;p&gt;When I start a project, I often try to plan it accordingly:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Have a clear overview of the feasibility&lt;/strong&gt;: if not feasible, either readjust the scope of do not take the project: better to deliver nothing than strong disappointment.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Research and plan&lt;/strong&gt;: like when preparing a race, look for the main obstacles
in your project and make a plan to overcome them. Define objectives and milestones
in a way they are measurable (e.g. I finished the code of module X by date Y).
Write them down and communicate them to all internal stakeholders (your team, your sister teams).
Communicate more pessimistic milestones for the customer so that you have some margin if things go wrong.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Regularly check your progress&lt;/strong&gt; to check you can finish the race before the cut-off.
Look at your milestones every week and re-evaluate your work plan if needed. If you are ahead of time, you might help some other
projects that need support or just finish your project earlier and polish it (better to under promise and over deliver).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Take large margins&lt;/strong&gt;: take at least 100% of margin, if you plan to complete a project in one month, ask for two months.
You might face unexpected issues, either human (one team member is ill or has some family issues) or technical and this margin is here to take the unexpected into account.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These are simple rules. No matter how experienced you are, not following
them can transform a nice race halfway into a long nightmare. And regardless of
experience, many people do not apply them.&lt;/p&gt;

&lt;p&gt;Following these rules and processes helped me to manage multiple
projects simultaneously and deliver them before the estimated delivery time. I now schedule my life
according to them. It helped me to track what I should be doing and ensure
that I complete all the tasks I want to do within a day, a weekend or a month.&lt;/p&gt;

&lt;p&gt;Managing projects is very simple: manage them as you run a race.&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Mar 2020 13:13:20 +0000</pubDate>
        <link>http://julien.gunnm.org/software%20engineering/essay/2020/03/06/manage-project-like-a-race/</link>
        <guid isPermaLink="true">http://julien.gunnm.org/software%20engineering/essay/2020/03/06/manage-project-like-a-race/</guid>
        
        <category>software engineering</category>
        
        <category>essay</category>
        
        
        <category>software engineering</category>
        
        <category>essay</category>
        
      </item>
    
  </channel>
</rss>
